#include <iostream>
using namespace std;

template <typename T>
class SinglyLinkedList {
public:
    struct Node {
        Node* next;
        T data;
        Node(Node* next, T data)
            : next(next), data(data) {}
        Node() : next(nullptr), data(false) {}
    };
private:
    Node* head;
    Node* tail;
    unsigned long long int size;
public:
    SinglyLinkedList() : head(nullptr), tail(nullptr), size(0) {}

    ~SinglyLinkedList() {
        if (size == 0) { return; }
        Node* temp;
        for (Node* node = head->next; node != nullptr;) {
            temp = node->next;
            delete node;
            node = temp;
        }
    }
    void push_back(T data) {
        if (head == nullptr) {
            head = new Node(nullptr, data);
            tail = head;
        }
        else {
            tail->next = new Node(nullptr, data);
            tail = tail->next;
        }
        size++;
    }
    T& front() {
        return head->data;
    }
    T& back() {
        return tail->data;
    }
    void push_front(T data) {
        Node* newHead = new Node(head, data);
        head = newHead;
        if (tail == nullptr) {
            tail = head;
        }
        size++;
    }
    Node* begin() {
        return head;
    }
    void pop_back() {
        Node* curr = head;
        Node* prev = head;
        if (tail == nullptr) {
            return;
        }
        else if (tail == head) {
            delete tail;
        }
        else {
            while (curr!=tail) {
                prev = curr;
                curr = curr->next;
            }
            if (curr == tail) {
                //delete tail;
                tail = prev;
                tail->next = nullptr;
                delete curr;
            }
        }
        size--;
    }

    void pop_front() {
        if (head == nullptr) {
            return;
        }
        else if (head == tail) {
            tail = nullptr;
        }
        else {
            Node* temp = head;
            head = temp->next;
            delete temp;
        }
        size--;
    }
};

/*04. Welcome to the jungle*/
// Timeout
/*int main() {
    size_t N, currentNumber;
    SinglyLinkedList<size_t> numbers;
    cin >> N;

    for (size_t i = 0; i < N; i++)
    {
        cin >> currentNumber;
        numbers.push_back(currentNumber);
    }
    SinglyLinkedList<size_t>::Node* curr = numbers.begin();
    size_t max = 1;
    size_t minStartPos = 0;
    size_t pos = 0;
    while (curr) {
        SinglyLinkedList<size_t>::Node* temp = curr;
        size_t count = 1;
        size_t lastData = temp->data;
        while (temp) {
            if (temp->next == nullptr) { break; }

            if (temp->next->data > lastData) {
                count++;
                lastData = temp->next->data;
            }
            
            temp = temp->next;
            
        }
        
        curr = curr->next;
        
        if (max < count) {
            
            minStartPos = pos;
            max = count;
        }
        pos++;
    }
    cout << minStartPos;
}*/

// Try for effective solution
int main() {
    size_t N, currentNumber;
    SinglyLinkedList<size_t> numbers;
    cin >> N;

    for (size_t i = 0; i < N; i++)
    {
        cin >> currentNumber;
        numbers.push_back(currentNumber);
    }
    SinglyLinkedList<size_t>::Node* curr = numbers.begin();
    size_t max = 1;
    size_t minStartPos = 0;
    size_t pos = 0;
    size_t count = 1;
    size_t lastData = 0;
    while (curr) {
        SinglyLinkedList<size_t>::Node* temp = curr;

        if (curr->next == nullptr) {
            break;
        }
        if (curr->data < curr->next->data) {
            count++;
            lastData = curr->next->data;
        }
        else {
            if (max < count) {

                minStartPos = pos-count;
                max = count;
            }
            count = 1;

        }
        

        curr = curr->next;

        if (max < count) {

            minStartPos = pos;
            max = count;
        }
        pos++;
    }
    cout << minStartPos;
}
