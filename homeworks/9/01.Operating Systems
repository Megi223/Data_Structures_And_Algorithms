#include <iostream>
#include <unordered_map>
#include <string>
#include <sstream>
#include <set>
#include <unordered_set>
using namespace std;

struct Directory {
    string name;
    Directory* father;
    set<Directory*> children;

    Directory(string _name, Directory* _father) {
        this->name = _name;
        this->father = _father;
        this->children = set<Directory*>();
    }
    Directory() {
        this->name = "";
        this->father = nullptr;
        this->children = set<Directory*>();
    }
    Directory* findChild(string wantedName) {
        for (auto k = this->children.begin(); k != this->children.end(); k++)
        {
            if ((*k)->name == wantedName) {
                return *k;
            }
        }
        return nullptr;
    }
    void addChild(Directory* newChild) {
        this->children.insert(newChild);
    }
    bool operator<(Directory& dir)
    {
        return name < dir.name;
    }
};

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);

    unordered_map<Directory*, set<string>> directories;
    unordered_map<string, Directory*> childFatherRelationship;

    Directory* startDirectory = new Directory("/", nullptr);

    directories[startDirectory] = set<string>();
    Directory* currentDirectory = startDirectory;

    size_t N;
    cin >> N;
    string command;
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
    for (size_t i = 0; i < N; i++)
    {
        getline(cin, command);
        string firstWord;
        string secondWord;

        istringstream commandStream(command);
        commandStream >> firstWord;
        if (firstWord == "mkdir") {
            commandStream >> secondWord;

            bool found = currentDirectory->findChild(secondWord) != nullptr;

            if (found) { cout << "Directory already exists" << '\n'; }
            else {
                Directory* newDir = new Directory(secondWord, currentDirectory);
                directories[newDir] = set<string>();
                directories[currentDirectory].insert(secondWord);
                currentDirectory->addChild(newDir);

                childFatherRelationship[secondWord] = currentDirectory;



            }
        }
        else if (firstWord == "ls") {
            for (auto j = directories[currentDirectory].begin(); j != directories[currentDirectory].end(); j++)
            {
                cout << *j << " ";
            }
            cout << '\n';
        }
        else if (firstWord == "pwd") {
            
            string fullpath;
            Directory* cur = currentDirectory;
            while (cur != nullptr) {
                if (cur->name == "/" && cur->father == nullptr) { fullpath.insert(0, "/"); break; }
                fullpath.insert(0, (cur->name + "/"));
                cur = cur->father;
            }
            //fullpath += "/";

            cout << fullpath << '\n';
        }
        else if (firstWord == "cd") {
            commandStream >> secondWord;

            if (secondWord == "..") {
                if (currentDirectory->name == "/" && currentDirectory->father == nullptr) {
                    cout << "No such directory" << '\n';
                    continue;
                }
                //currentDirectory = childFatherRelationship[currentDirectory->name];
                currentDirectory = currentDirectory->father;
                continue;
            }

            if (directories[currentDirectory].find(secondWord) == directories[currentDirectory].end())
            {
                cout << "No such directory" << '\n';
                continue;
            }

            currentDirectory = currentDirectory->findChild(secondWord);
        }
    }
}

