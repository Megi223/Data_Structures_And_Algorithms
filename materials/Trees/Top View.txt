// Top View
/*I suggest the following two solutions to this task:
    1. first we do level traversal (bfs) and take the first x we have on each level- 
        thus we ensure that we get the leftmost element of each level and 
        since x is different on each level we ensure that we get exactly one element of each X.     
        Then we sort the vector answer by X ascending and this is the wanted answer from the task.
    2. The second solution is based on traversing through vertical lines and getting exactly one element for each vertical
        - thus we ensure that we get exactly one X of each possible. 
        We choose the element on each vertical by getting the one with the biggest Y ( this means the one that is situated the highest)
*/
/*#include <iostream>
#include <vector>
#include <limits>
#include <algorithm>
#include <queue>
using namespace std;
long long int minX = 0;
struct Node {
    size_t value;
    Node* leftChild;
    Node* rightChild;
    long long int X;
    long long int Y;
    Node(size_t _val,long long int _X,long long int _Y) {
        this->value = _val;
        this->leftChild = nullptr;
        this->rightChild = nullptr;
        this->X = _X;
        this->Y = _Y;
    }
    Node* addLeftChild(size_t val) {
        Node* toBeAdded = new Node(val,this->X-1,this->Y-1);
        if (this->X - 1 < minX) {
            minX = this->X - 1;
        }
        this->leftChild = toBeAdded;
        return toBeAdded;
    }
    Node* addRightChild(size_t val) {
        Node* toBeAdded = new Node(val, this->X + 1, this->Y - 1);
        this->rightChild = toBeAdded;
        return toBeAdded;
    }
};

// used for 1st solution
bool visited[10000001];
// used for 2nd solution
Node* visitedNodes[1000001];
vector<Node*> ans;
class Tree {
    Node* root;
    
public:
    Tree(Node* root) {
        this->root = root;
    }
    Node* getRoot() {
        return this->root;
    }
    // first solution
    void traverse() {
        queue<Node*> q;
        q.push(root);
        while (!q.empty())
        {
            Node* current = q.front();
            q.pop();
            if (visited[current->X + abs(minX)] == false) {
                ans.push_back(current);
                //cout << root->value << ' ';
                visited[current->X + abs(minX)] = true;
            }
            if (current->leftChild != nullptr) {
                q.push(current->leftChild);
            }
            if (current->rightChild != nullptr) {
                q.push(current->rightChild);
            }
        }
    }
    // second solution
    void traverseSecond(Node* root) {
        if (root == nullptr) { return; }
        if (visitedNodes[root->X + abs(minX)] == nullptr) {
            visitedNodes[root->X + abs(minX)] = root;
        }
        else {
            if (visitedNodes[root->X + abs(minX)]->Y < root->Y) {
                visitedNodes[root->X + abs(minX)] = root;
            }
            
        }
        traverseSecond(root->leftChild);
        traverseSecond(root->rightChild);
    }
};

bool sortBy(Node* first, Node* sec) {
    return first->X < sec->X;
}

int main() {
    size_t N;
    cin >> N;
    vector<Node*> allNodes(1000001, nullptr);
    long long int left, right;
    cin >> left >> right;
    Node* root = new Node(0, 0, 0);
    Node* leftOfRoot = root->addLeftChild(left);
    Node* rightOfRoot = root->addRightChild(right);
    Tree tree(root);
    allNodes[0] = root;
    allNodes[left] = leftOfRoot;
    allNodes[right] = rightOfRoot;
    for (size_t i = 1; i < N; i++)
    {
        cin >> left >> right;
        if (left != -1) {
            Node* addedLeft = allNodes[i]->addLeftChild(left);
            allNodes[left] = addedLeft;
        }
        if (right != -1) {
            Node* addedRight = allNodes[i]->addRightChild(right);
            allNodes[right] = addedRight;

        }
    }

    // first solution
    //tree.traverse();
    //sort(ans.begin(), ans.end(),sortBy);
    //
    //for (size_t i = 0; i < ans.size(); i++)
    //{
    //    cout << ans[i]->value << ' ';
    //}

    // second solution
    tree.traverseSecond(tree.getRoot());
    for (size_t i = 0; i < 1000001; i++)
    {
        if (visitedNodes[i] != nullptr) {
            cout << visitedNodes[i]->value << ' ';
        }
    }
}*/