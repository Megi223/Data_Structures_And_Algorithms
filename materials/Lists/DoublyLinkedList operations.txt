template <typename T>
class DoublyLinkedList {
public:
    struct Node {
        Node* prev;
        Node* next;
        T data;
        Node(Node* prev, Node* next, T data)
            : prev(prev), next(next), data(data) {}
        Node() : prev(nullptr), next(nullptr), data(false) {}
    };
private:
    Node* head;
    Node* tail;
    unsigned long long int size;
public:
    DoublyLinkedList() : head(nullptr), tail(nullptr), size(0) {}

    ~DoublyLinkedList() {
        if (size == 0) { return; }
        Node* temp;
        for (Node* node = head->next; node != nullptr;) {
            temp = node->next;
            delete node;
            node = temp;
        }
    }
    void push_back(T data) {
        if (head == nullptr) {
            head = new Node(nullptr, nullptr, data);
            tail = head;
        }
        else {
            tail->next = new Node(tail, nullptr, data);
            tail = tail->next;
        }
        size++;
    }
    T& front() {
        return head->data;
    }
    T& back() {
        return tail->data;
    }
    void push_front(T data) {
        Node* newHead = new Node(nullptr, head, data);
        if (size > 0) {
            head->prev = newHead;
        }
        head = newHead;
        if (tail == nullptr) {
            tail = head;
        }
        size++;
    }
    Node* begin() {
        return head;
    }
    void pop_back() {
        if (tail)
        {
            Node* nodeToDelete = tail;
            tail = tail->prev;

            if (tail)
            {
                tail->next = nullptr;
            }
            else
            {
                head = nullptr;
            }

            delete nodeToDelete;
            size--;
        }
    }
};


// reverse
