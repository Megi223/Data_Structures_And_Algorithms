// disjoint set union

#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <unordered_map>
using namespace std;


unordered_map<size_t, vector<size_t>> graph;

unordered_map<size_t, size_t> parents;
unordered_map<size_t, size_t> depth;


size_t findRoot(size_t vertex) {
    if (parents[vertex] == vertex) {
        return vertex;
    }
    return parents[vertex] = findRoot(parents[vertex]);
}

bool unite(size_t first, size_t sec) {
    size_t rootU = findRoot(first);
    size_t rootV = findRoot(sec);
    if (rootU == rootV) { return false; }
    if (depth[rootU] < depth[rootV]) {
        parents[rootU] = rootV;
        depth[rootV] += depth[rootU];
    }
    else {
        parents[rootV] = rootU;
        depth[rootU] += depth[rootV];
    }
    return true;
}

int main() {
    size_t N, M, from, to;
    cin >> N >> M;
    for (size_t i = 1; i <= N; i++)
    {
        parents[i] = i;
        depth[i] = 1;
    }
    size_t cnt = 0;
    if (N == 1) {
        cout << 0;
        return 0;
    }
    for (size_t i = 0; i < M; i++) {
        cin >> from >> to;
        bool success = unite(from, to);
        if (success) {
            cnt++;
        }
        if (cnt == N - 1) {
            cout << i + 1;
            return 0;
        }
    }
    cout << -1;
}

