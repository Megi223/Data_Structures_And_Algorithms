// print any cycle in a directed graph
#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <unordered_map>
#include <list>
#include <string>
using namespace std;

unordered_map<string, list<string>> graph;
unordered_map<string, bool> tickets;
unordered_map<string, size_t> cityNumber;
string fromCity = "";
vector<string> path;
bool foundCycle = false;
void dfs(string city) {
    if (city == fromCity && path.size() > 1) {

        foundCycle = true;
        return;
    }

    for (auto n : graph[city]) {
        string key = to_string(cityNumber[city]) + to_string(cityNumber[n]);

        if (tickets[key]) {
            tickets[key] = false;
            path.push_back(n);
            dfs(n);
            if (foundCycle) {
                break;

            }
            else {
                tickets[key] = true;
                path.pop_back();
            }
        }
    }

}


int main() {
    size_t N, M;
    cin >> N >> M;
    string fCity, sCity;
    size_t cnt = 0;
    for (size_t i = 0; i < M; i++) {
        cin >> fCity >> sCity;
        graph[fCity].push_back(sCity);
        auto p = make_pair(fCity, sCity);

        if (cityNumber.find(fCity) == cityNumber.end()) {
            cityNumber[fCity] = cnt;
            cnt++;
        }
        if (cityNumber.find(sCity) == cityNumber.end()) {
            cityNumber[sCity] = cnt;
            cnt++;
        }
        string key = to_string(cityNumber[fCity]) + to_string(cityNumber[sCity]);
        tickets[key] = true;

    }
    string startCity;

    cin >> startCity;
    fromCity = startCity;
    dfs(startCity);
    if (path.size() == 0) {
        cout << -1;
        return 0;
    }
    cout << fromCity << ' ';
    for (size_t i = 0; i < path.size(); i++)
    {
        cout << path[i] << ' ';
    }


}
