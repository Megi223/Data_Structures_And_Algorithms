#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <unordered_map>
using namespace std;

unordered_map<size_t,vector<size_t>> graph;
unordered_map<size_t,size_t> graphComponent;
unordered_map<size_t,bool> visited;
void dfs(size_t v,size_t currentComp){
    visited[v]=true;
    graphComponent[v] = currentComp;
    for(auto n:graph[v]){
        if(!visited[n]){
            dfs(n,currentComp);
        }
    }
}


int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    size_t N,M,K;
    size_t from,to;
    cin >> N >> M;
    
    for(size_t i=0;i<M;i++){
        cin >> from >> to;
        graph[from].push_back(to);
        graph[to].push_back(from);
    }
    size_t currentCompNumber = 1;
    for(size_t i=1;i<=N;i++){
        if(!visited[i]){
            dfs(i,currentCompNumber);
            currentCompNumber++;
        }
    }
    
    cin >> K;
    for(size_t i=0;i<K;i++){
        cin >> from >> to;
        cout << ((graphComponent[from])==(graphComponent[to])) << ' ';
    }
}
