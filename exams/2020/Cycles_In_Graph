/* the task is to find the smallest sum of weights of edges so that there are no cycles in the graph*/
/*== build a maximum spanning tree*/
#include <bits/stdc++.h>
using namespace std;

struct Edge{
    size_t from;
    size_t to;
    size_t weight;
    Edge():from(0),to(0),weight(0){}
    Edge(size_t _from,size_t _to,size_t _weight):from(_from),to(_to),weight(_weight){}
};

vector<Edge> edges;
unordered_map<size_t,size_t> parents;
size_t ans;
size_t N;
bool compare(Edge& first,Edge& second){
    return first.weight>second.weight;
}

size_t findParent(size_t v){
    if(parents[v]==v){
        return v;
    }
    return parents[v] = findParent(parents[v]);
}

void makeUnion(size_t u,size_t v){
    parents[u]=v;
}
void MaxST(){
    sort(edges.begin(),edges.end(),compare);
    for(size_t i=0;i<N;i++){
        parents[i]=i;
    }
    for(size_t i=0;i<edges.size();i++){
        size_t parentOfFrom = findParent(edges[i].from);
        size_t parentOfTo = findParent(edges[i].to);
        if(parentOfFrom!=parentOfTo){
            makeUnion(parentOfFrom,parentOfTo);
        }
        else{
            ans+=edges[i].weight;
        }
        
    }
}


int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    size_t M,from,to,weight;
    cin >> N >> M;
    for(size_t i=0;i<M;i++){
        cin >> from >> to >> weight;
        Edge edge(from,to,weight);
        edges.push_back(edge);
    }
    MaxST();
    cout << ans;
}
