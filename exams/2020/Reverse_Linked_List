/*reverse linked list from a position to a position*/

#include <iostream>
using namespace std;

struct Node {
    int data;
    Node *next;
};

struct List {
    Node* head = nullptr;
    Node* tail = nullptr;

    void add(int value) {
        Node* temp = new Node;
        temp->data = value;
        temp->next = nullptr;
        
        if (head == nullptr and tail == nullptr){
            head = tail = temp;
        } else {
            tail->next = temp;
            tail = temp;
        }
    }

    size_t getCount(){
        size_t cnt = 0;
        auto iter = head;
        while(iter){
            cnt++;
            iter=iter->next;
        }
        return cnt;
    }

    void reverse(int from, int to) {
        size_t cnt = getCount();
        if(from > cnt){
            return;
        }
        if(to>cnt){
            to = cnt;
        }
        auto iter = head;
        for(size_t i=1;i<from-1;i++){
            iter=iter->next;
        }
        auto globalPrev = iter;
        auto startNode=head;
        auto prev = head;
        if(from==1){
            globalPrev = nullptr;
            iter=head->next;
            prev=head;
            startNode=head;
        }
        else{
            iter=iter->next;
            startNode = iter;
            prev = iter;
            iter=iter->next;
        }
        
        for(size_t i=from;i<to;i++){
            auto temp = iter->next;
            iter->next = prev;
            prev = iter;
            iter=temp;
        }
        startNode->next = iter;
        
        if(globalPrev)
        { globalPrev->next=prev;}
        if(from==1){
            
            startNode->next = iter;
            head = prev;
        }
        if(to==cnt){
            tail = startNode;
        }
       
    }

    void print() {
        Node* temp = head;
    
        while (temp) {
            cout << temp->data << " ";
            temp = temp->next;
        }
    
        cout << endl;
    }

    ~List() {
        Node* curr = head;
        
        while(curr) {
            Node* prev = new Node;
            prev = curr;
            curr = curr->next;
            delete prev;
        }
        
        delete curr;
    }
};

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    
    List testList;

    int queries;
    cin >> queries;

    for (int t = 0; t < queries; t++) {
        
        string op;
        cin >> op;
        
        if (op == "add") {
            int num;
            cin >> num;
            testList.add(num);
        }
            
        if (op == "print") {
            testList.print();
        }
            
        if (op == "reverse") {
            int from, to;
            cin >> from >> to;
            testList.reverse(from, to);
        
        }
    }
    
    return 0;
}
