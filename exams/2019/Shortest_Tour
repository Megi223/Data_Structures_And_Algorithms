#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <unordered_map>
#include <queue>
#include <climits>
#include <set>
using namespace std;

set<size_t> forbidden;
unordered_map<size_t,vector<size_t>> graph;

size_t dijkstra(size_t start,size_t end,size_t N){
    unordered_map<size_t,size_t> distances;
    for(size_t i=0;i<N;i++){
        distances[i]=INT_MAX;
    }
    forbidden.erase(start);
    forbidden.erase(end);
    priority_queue<pair<size_t,size_t>,vector<pair<size_t,size_t>>,greater<pair<size_t,size_t>>> pq;
    distances[start] = 0;
    pq.push({0,start});
    while(!pq.empty()){
        
        if (pq.top().first != distances[pq.top().second]) { pq.pop(); continue; }
        
        size_t curr = pq.top().second;
        pq.pop();
        
        
        for(auto n:graph[curr]){
            if(forbidden.find(n) == forbidden.end() && distances[n] > distances[curr]+1){
                distances[n] = distances[curr]+1;
                pq.push({distances[n],n});
            }
        }
    }

    return distances[end];
}

int main() {
    size_t N,M,K,attr,from,to;
    cin >> N >> M;
    
    for(size_t i=0;i<M;i++){
        cin >> from >> to;
        graph[from].push_back(to);
    }
    cin >> K;
    vector<size_t> attractions;
    
    for(size_t i=0;i<K;i++){
        cin >> attr;
        attractions.push_back(attr);
        forbidden.insert(attr);
    }
    size_t globalAns = 0;
    for(size_t i=1;i<K;i++){
        size_t start=attractions[i-1];
        size_t end=attractions[i];
        size_t ans = dijkstra(start,end,N);
        if(ans==INT_MAX){
            cout << -1;
            return 0;
        }
        else{
            globalAns+=ans;
        }
    }
    cout << globalAns;
}
