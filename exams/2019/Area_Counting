#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <unordered_map>
using namespace std;

void dfs(size_t v, unordered_map<size_t,vector<size_t>> &graph,unordered_map<size_t,bool> &visited){
    visited[v]=true;
    for(auto n:graph[v]){
        if(!visited[n]){
            dfs(n,graph,visited);
        }
    }
}

size_t countComponents(unordered_map<size_t,vector<size_t>> &graph,size_t N){
    unordered_map<size_t,bool> visited;
    size_t cnt = 0;
    for(size_t i=0;i<N;i++){
        if(!visited[i]){
            dfs(i,graph,visited);
            cnt++;
        }
    }
    return cnt;
}

int main() {
    size_t T;
    cin >> T;
    vector<size_t> ans;
    for(size_t i=0;i<T;i++){
        size_t N, M,from,to;
        cin >> N >> M;
        
        unordered_map<size_t,vector<size_t>> graph;
        for(size_t j=0;j<M;j++){
            cin >> from >> to;
            graph[from].push_back(to);
            graph[to].push_back(from);
        }
        size_t cnt = countComponents(graph,N);
        ans.push_back(cnt);
    }
    for(size_t i=0;i<ans.size();i++){
        cout << ans[i] << ' ';
    }
}
